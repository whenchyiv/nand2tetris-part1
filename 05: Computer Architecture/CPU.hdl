// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A Register
    Not(in=instruction[15], out=AInstruction);
    Or(a=AInstruction, b=instruction[5], out=ALoadBit);
    Mux16(a=ALUOut, b=instruction, sel=AInstruction, out=AMuxOut);
    ARegister(in=AMuxOut, load=ALoadBit, out=ARegisterOut, out[0..14]=addressM);

    // M Select
    And(a=instruction[12], b=instruction[15], out=MSelectBit);
    Mux16(a=ARegisterOut, b=inM, sel=MSelectBit, out=AMMuxOut);

    //ALU
    ALU(x=DRegisterOut, y=AMMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=ZROut, ng=NGOut);

    //D Register
    And(a=instruction[15], b=instruction[4], out=DSelectBit);
    DRegister(in=ALUOut, load=DSelectBit, out=DRegisterOut);

    // Jumps
    Not(in=NGOut, out=JGECond);
    Not(in=ZROut, out=JNECond);
    And(a=JGECond, b=JNECond, out=JGTCond);
    And(a=JGECond, b=ZROut, out=JEQCond);
    And(a=JNECond, b=NGOut, out=JLTCond);
    Or(a=JEQCond, b=JLTCond, out=JLECond);
    Mux8Way16(a[0]=false, b[0]=JGTCond, c[0]=JEQCond, d[0]=JGECond, e[0]=JLTCond, f[0]=JNECond, g[0]=JLECond, h[0]=true, sel=instruction[0..2], out[0]=JumpOut);

    // PC
    And(a=instruction[15], b=JumpOut, out=DoJump); // Don't jump on address instructions
    PC(in=ARegisterOut, load=DoJump, inc=true, reset=reset, out[0..14]=pc);

    // WriteM
    And(a=instruction[15], b=instruction[3], out=writeM);
}