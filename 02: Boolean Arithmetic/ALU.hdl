// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zx flag
    Mux16(
        a=x,
        b[0..15]=false,
        sel=zx,
        out=zxOut
    );
    // nx flag
    Not16(
        in=zxOut,
        out=notX
    );
    Mux16(
        a=zxOut,
        b=notX,
        sel=nx,
        out=nxOut
    );

    // zy flag
    Mux16(
        a=y,
        b[0..15]=false,
        sel=zy,
        out=zyOut
    );
    // ny flag
    Not16(
        in=zyOut,
        out=notY
    );
    Mux16(
        a=zyOut,
        b=notY,
        sel=ny,
        out=nyOut
    );

    // f flag
    // x+y
    Add16(
        a=nxOut,
        b=nyOut,
        out=addXY
    );
    And16(
        a=nxOut,
        b=nyOut,
        out=andXY
    );
    Mux16(
        a=andXY,
        b=addXY,
        sel=f,
        out=fOut
    );

    // no -> final output
    // !out
    Not16(
        in=fOut,
        out=notFOut
    );
    Mux16(
        a=fOut,
        b=notFOut,
        sel=no,
        out=out
    );

    // for flags
    Mux16(
        a=fOut,
        b=notFOut,
        sel=no,
        out[0..7]=flagOut1,
        out[8..15]=flagOut2
    );

    // zr out -> check if any 1s, if any 1s then not zero, then negate for true if zero
    Or8Way(
        in=flagOut1,
        out=first8BitOr
    );
    Or8Way(
        in=flagOut2,
        out=second8BitOr
    );
    Or(
        a=first8BitOr,
        b=second8BitOr,
        out=notZero
    );
    Not(
        in=notZero,
        out=zr
    );

    // ng out -> check for 1 in the most significant bit, if 1 then negative (twos compliment)
    // need to use out[7] because we have split the flagOut into two for the purposes of or8Waying it
    // above, and this is a 16 bit And. We can't address flagOut2[7] becuse it throws an error about
    // accessing the sub bus of an internal node. ¯\_(ツ)_/¯
    And16(
        a[0..7]=flagOut2,
        b[0..7]=flagOut2,
        out[7]=ng
    );
}